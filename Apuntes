[Lección 1]
* Crear proyecto:
# meteor create <nombreProyecto>

* Inicar proyecto:
# meteor

* Añadir paquete
- Oficial
# meteor add <paquete>
- Dev externo
# meteor add <repositorio>:<paquete>
Los paquetes NPM no se pueden usar por defecto con meteor,
pero pueden ser usados por paquetes externos.

* Reglas de ejecución
El código de la carpeta /server se ejecuta sólo en el servidor
El código de la carpeta /cliente se ejecuta sólo en el cliente
El código de las otras carpetas se ejecutan en ambas partes

* Orden de carga ficheros
1º /lib
2º main.*
3º orden alfabético

[Lección 2]
* Para realizar una inclusión en un archivo html
{{> templateName}}

* Los ayudantes de plantilla, controladores de flujo en html
{{#each}}...{{/each}}
[[#if}}...[[/if}}

* Definimos la función para el ayudante de la plantilla
Template.templateName.helpers()

[Lección 2.5]
* Habla sobre Git, interesante leerla.

[Lección 3]
* Crear colección de datos
En la carpeta lib/collections añadimos un fichero JS
collectionName = new Mongo.Collection('collection_name');

* Para agregar datos al iniciar el servidor en la carpeta server
se agregan los insert de esta forma.
if (collectionName.find().count() === 0) {
    collectionName.insert({
        dato1: "",
        dato2: 00
    });
}

* Para hacer visibles estos datos en el navegador,
cargamos la colección en nuestro ayudante de plantilla
return collectionName.find();

* Para evitar la transferenica de todos los Posts al navegador
eliminamos autopublish y tenemos que crear nuestras publicaciones
manualmente y sus respectivas suscripciones.
- Publicación (/server/:
Meteor.publish('collection_name', function() {
    return collectionName.find();
});
- Suscripción (/client/*.js:
Meteor.subscribe('collection_name');

[Lección 4]
* Para realizar el enrutado de URL usamos el
paquete "Iron Router"
meteor add iron:router

* Para el enrutado se usa el ayudante {{> yield}}, llevamos el
body del html a un fichero por separado aplicandolo
como un template (layout.html).
Creamos un fichero para enrutar (router.js)
Router.configure({
    layoutTemplate: 'layout'
});
Router.route('/', {name: 'postsList'});

* Rutas con nombre, tengo que volver a mirarlo, no lo entiendo.

* Con Iron Router se puede mostrar una pantalla diferentes mientras
se está cargando la colección, se añade la suscripción al router
con el parámetro waitOn y con el parámetro loudingTemplate, indicas
el template que vas a lanzar mientras no está lista la suscripción
Router.configure({
    layoutTemplate: 'layout',
    loadingTemplate: 'loading',
    waitOn: function () {
        return Meteor.subscribe('posts');
    }
});